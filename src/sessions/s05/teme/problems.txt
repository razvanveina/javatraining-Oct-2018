1. Sa se implementeze o metoda care returneaza dimensiunea celei mai lungi secvente de numere egale dintr-un sir de numere primit ca parametru.

int longestSeq(int[] sir) { ...

Example: 
longestSeq({1, 1, 2, 3, 5, 1, 5, 6, 9}) => 2
longestSeq ({1, 2, 3, 2, 3, 4}) => 1
longestSeq ({1, 1, 1, 2, 2, 3, 3, 3, 3, 2, 3, 4}) => 4

2. Sa se implementeze o metoda care primeste ca parametri doua siruri ordonate de numere si
returneaza un sir ordonat compus din elementele celor doua siruri. 

int[] sortedConcatenation(int[] sir1, int[] sir2) {...

Exemplu: 
sortedConcatenation({1,1,2,3,5}, {1,5,6,9}) => {1,1,1,2,3,5,5,6,9}
sortedConcatenation({1,2,3}, {2,3,4}) => {1,2,2,3,3,4}

3. Sa se implementeze o clasa care simuleaza un minicalculator.
Numele clasei este Calculator.
Ca variabila membru in interiorul clasei avem valoarea curenta.
In clasa exista urmatoarele metode:
  - un constructor cu un parametru care initializeaza valoarea curenta cu valoarea parametrului
  - un constructor fara parametru care initializeaza valoarea curenta cu 0
  - o metoda void add(int n) care va aduna la valoarea curenta valoarea primita ca parametru
  - o metoda void subtract(int n) care va scadea din valoarea curenta valoarea primita ca parametru    
  - o metoda void multiply(int n) care va inmulti valoarea curenta cu numarul primit ca parametru
  - o metoda void display() care va afisa valoarea curenta
Dupa implementarea acestei clase implementati o clasa CalculatorClient care demonstreaza functionalitatea clasei de mai sus
creand un obiect de tip calculator si apelandu-i metodele.